/*
<metadata description="Play TicTacToe against a quantum computer">
</metadata>
*/

int tl, t, tr;
int ml, m, mr;
int bl, b, br;

bool playerTurn;
int player;
int computer;


int win_animate_time;
bool animate_one;

int winner;

void initialise()
{
    tl = 0;
    t  = 0;
    tr = 0;
    ml = 0;
    m  = 0;
    mr = 0;
    bl = 0;
    b  = 0;
    br = 0;
    
    playerTurn = true;
    player = 1;
    computer = 2;
    
    winner = 0;
    win_animate_time = 0;
    animate_one = true;
}

void repaint()
{
    clearDisplay();
    
    if (winner == computer){
        ibmq();
    } 
    else if (winner == player){
        face();
    }
    else {
        drawGrid();
        drawSigns();
    }  
}

void drawGrid()
{
    int white = makeARGB (255, 200, 200, 200);
    
    if (tl == 0) drawRect (white, 0,  0,  5, 5);
    if (t  == 0) drawRect (white, 5,  0,  5, 5);
    if (tr == 0) drawRect (white, 10, 0,  5, 5);
    if (ml == 0) drawRect (white, 0,  5,  5, 5);
    if (m  == 0) drawRect (white, 5,  5,  5, 5);
    if (mr == 0) drawRect (white, 10, 5,  5, 5);
    if (bl == 0) drawRect (white, 0,  10, 5, 5);
    if (b  == 0) drawRect (white, 5,  10, 5, 5);
    if (br == 0) drawRect (white, 10, 10, 5, 5);
}

void drawRect (int colour, int x, int y, int w, int h)
{
    fillRect (colour, x, y, 1, h);
    fillRect (colour, x, y, w, 1);
    
    fillRect (colour, x + w - 1, y,         1, h);
    fillRect (colour, x,         y + h - 1, w, 1);
}

void drawSigns()
{
    evaluate (tl, 0,   0);
    evaluate (t , 5,   0);
    evaluate (tr, 10,  0);
    
    evaluate (ml, 0,   5);
    evaluate (m,  5,   5);
    evaluate (mr, 10,  5);
    
    evaluate (bl, 0,  10);
    evaluate (b,  5,  10);
    evaluate (br, 10, 10);
}

void evaluate (int value, int x, int y)
{
    if (value == 1)
        drawX (x, y);
    else if (value == 2)
        drawO (x, y);
}

void drawX (int x, int y)
{
    int xColour = makeARGB (255, 0, 255, 0);
    
    fillRect (xColour, x,     y,     1, 1);
    fillRect (xColour, x + 1, y + 1, 1, 1);
    fillRect (xColour, x + 2, y + 2, 1, 1);
    fillRect (xColour, x + 3, y + 3, 1, 1);
    fillRect (xColour, x + 4, y + 4, 1, 1);
    
    fillRect (xColour, x + 4, y,     1, 1);
    fillRect (xColour, x + 3, y + 1, 1, 1);
    fillRect (xColour, x + 2, y + 2, 1, 1);
    fillRect (xColour, x + 1, y + 3, 1, 1);
    fillRect (xColour, x,     y + 4, 1, 1);
}

void drawO (int x, int y)
{
    int oColour = makeARGB (255, 0, 0, 255);
    
    fillRect (oColour, x,     y,     5, 1);
    fillRect (oColour, x,     y + 4, 5, 1);
    fillRect (oColour, x,     y,     1, 5);
    fillRect (oColour, x + 4, y,     1, 5);
}

void touchStart (int index, float x, float y, float z, float vz)
{
    int xPos = int (x * 7);
    int yPos = int (y * 7);
    
    int index = getIndex (xPos, yPos);
    if (playerTurn && winner == 0) {
        if (setValueForIndex (index, player)) {
            playerTurn = false;
            sendMIDI (0xa0, index);
        }
    }
}

int getIndex (int x, int y)
{
    int xInd = x / 5;
    int yInd = y / 5;
    
    return yInd * 3 + xInd;
}

bool setValueForIndex (int index, int value)
{   
    if (index == 0) { 
        if (tl == 0) {
            tl = value;
            return true;
        }
        return false;
    }
    if (index == 1) { 
        if (t == 0) {
            t = value;
            return true;
        }
        return false;
    }
    if (index == 2) { 
        if (tr == 0) {
            tr = value;
            return true;
        }
        return false;
    }
    if (index == 3) { 
        if (ml == 0) {
            ml = value;
            return true;
        }
        return false;
    }
    if (index == 4) { 
        if (m == 0) {
            m = value;
            return true;
        }
        return false;
    }
    if (index == 5) { 
        if (mr == 0) {
            mr = value;
            return true;
        }
        return false;
    }
    if (index == 6) { 
        if (bl == 0) {
            bl = value;
            return true;
        }
        return false;
    }
    if (index == 7) { 
        if (b == 0) {
            b = value;
            return true;
        }
        return false;
    }
    if (index == 8) { 
        if (br == 0) {
            br = value;
            return true;
        }
        return false;
    }
    
    return false;
}

void handleMIDI (int byte0, int byte1, int byte2)
{
    log(byte0);
    log(byte1);
    log(byte2);

    if (byte0 == 0xc0) {
        initialise();
    }
    
    // move by the quantum computer
    if (byte0 == 0xa0) {
        setValueForIndex (byte1, computer);
        playerTurn = true;
    }
    
    // someone has won
    if (byte0 == 0xb0){
        winner = byte1;
    }
}

void ibmq()
{
    int colour = 0;
    if (animate_one){
        colour = makeARGB (255, 255, 0, 255); 
    } else {
        colour = makeARGB (255, 0, 0, 255);
    }
    if (win_animate_time == 5) {
        animate_one = !animate_one;
        win_animate_time = 0;
    }
    win_animate_time = win_animate_time +1;
    
    int x = 4;
    int y = 1;
    
    fillRect (colour, x + 2, y,      3,  1);
    fillRect (colour, x + 1, y + 1,  5,  1);
    
    fillRect (colour, x + 0, y + 2,  2, 1);
    fillRect (colour, x + 5, y + 2,  2, 1);
    
    fillRect (colour, x + 0, y + 3,  2, 1);
    fillRect (colour, x + 5, y + 3,  2, 1);
    
    fillRect (colour, x + 0, y + 4,  2, 1);
    fillRect (colour, x + 5, y + 4,  2, 1);
    
    fillRect (colour, x + 0, y + 5,  2, 1);
    fillRect (colour, x + 5, y + 5,  2, 1);
    
    fillRect (colour, x + 0, y + 6,  2, 1);
    fillRect (colour, x + 5, y + 6,  2, 1);
    
    fillRect (colour, x + 0, y + 7,  2, 1);
    fillRect (colour, x + 5, y + 7,  2, 1);
    
    fillRect (colour, x + 0, y + 8,  2, 1);
    fillRect (colour, x + 5, y + 8,  2, 1);
    
    fillRect (colour, x + 1, y + 9,  5, 1);
    fillRect (colour, x + 2, y + 10, 3, 1);
    fillRect (colour, x + 3, y + 11, 3, 1);
    fillRect (colour, x + 3, y + 12, 3, 1);
}


void face()
{
    int colour = makeARGB (255, 255, 0, 255); 
    
    if (win_animate_time == 5) {
        animate_one = !animate_one;
        win_animate_time = 0;
    }
    win_animate_time = win_animate_time +1;
    
    int x = 4;
    int y = 1;
    
    fillRect (colour, x + 2, y,      3,  1);
    fillRect (colour, x + 1, y + 1,      5,  1);
    fillRect (colour, x + 1, y + 2,      5,  1);
    fillRect (colour, x + 1, y + 3,      5,  1);
    fillRect (colour, x + 2, y + 4,      3,  1);
    
    // make him dance!
    fillRect (colour, x + 3, y + 5,      1,  1);
    if (animate_one) {
        fillRect (colour, x + 6, y + 5,      1,  1);
    } else {
        fillRect (colour, x + 0, y + 5,      1,  1);
    }
    
    fillRect (colour, x + 0, y + 6,      7,  1);
    
    fillRect (colour, x + 3, y + 7,      1,  1);
    if (animate_one){
        fillRect (colour, x + 0, y + 7,      1,  1);
    } else {
        fillRect (colour, x + 6, y + 7,      1,  1);
    }
    
    
    fillRect (colour, x + 3, y + 8,      1,  1);
    fillRect (colour, x + 2, y + 9,      3,  1);
    
    fillRect (colour, x + 1, y + 10,      2,  1);
    fillRect (colour, x + 4, y + 10,      2,  1);
    
    fillRect (colour, x + 1, y + 11,      1,  1);
    fillRect (colour, x + 5, y + 11,      1,  1);
    
    fillRect (colour, x + 0, y + 12,      2,  1);
    fillRect (colour, x + 5, y + 12,      2,  1);
    
}



void handleButtonDown (int index)
{
    sendMIDI (0xcc);
    initialise();
}